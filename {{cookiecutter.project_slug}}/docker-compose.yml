services:

  django:
    build:
      context: .
      dockerfile: ./compose/django/Dockerfile
    volumes:
      - /app/.venv
      - ./app:/app:z
    command: /start
    image: 'django-{{ cookiecutter.env_type }}-{{ cookiecutter.project_slug }}'
  {%- if cookiecutter.env_type == 'dev' %}
    ports:
      - "8000:8000"
  {%- endif %}
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=Host(`{{ cookiecutter.domain_name }}`)"
      - "traefik.http.routers.django.entrypoints=web"
      - "traefik.http.services.django.loadbalancer.server.port=8000"

  postgres:
    build:
      context: .
      dockerfile: ./compose/postgres/Dockerfile
    image: 'postgres-{{ cookiecutter.env_type }}-{{ cookiecutter.project_slug }}'
    volumes:
      - {{ cookiecutter.project_slug }}_{{ cookiecutter.env_type }}_postgres_data:/var/lib/postgresql/data
      - {{ cookiecutter.project_slug }}_{{ cookiecutter.env_type }}_postgres_backups:/backups
    env_file:
      - .env

  traefik:
    image: traefik:v3.5
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  {{ cookiecutter.project_slug }}_{{ cookiecutter.env_type }}_postgres_data: {}
  {{ cookiecutter.project_slug }}_{{ cookiecutter.env_type }}_postgres_backups: {}